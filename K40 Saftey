#include <LiquidCrystal_I2C.h>

#include <OneWire.h>

#include <DallasTemperature.h>

#define ONE_WIRE_BUS 3
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
const int Output_Pin = 2;
LiquidCrystal_I2C lcd(0x27, 20, 4);  // I2C address 0x27

int deviceCount = 0;
float tempC;
float tankC;
float tubeC;
int flowmin = 25;
volatile int Pulse_Count;
unsigned int Liter_per_hour;
unsigned long Current_Time, Loop_Time;
int Laser = 7;
int Lights = 6;
int flash = 0;

void setup() {
  pinMode(Laser, OUTPUT);
  digitalWrite(Laser, HIGH);

  lcd.init();       //initialize the lcd
  lcd.backlight();  //open the backlight
  pinMode(Output_Pin, INPUT);
  Serial.begin(9600);
  attachInterrupt(0, Detect_Rising_Edge, RISING);

  Current_Time = millis();
  Loop_Time = Current_Time;
  sensors.begin();  // Start up the library
  Serial.begin(9600);

  // locate devices on the bus
  Serial.print("Locating devices...");
  Serial.print("Found ");
  deviceCount = sensors.getDeviceCount();
  Serial.print(deviceCount, DEC);
  Serial.println(" devices.");
  Serial.println("");

  // Send command to all the sensors for temperature conversion
  sensors.requestTemperatures();
  tankC = sensors.getTempCByIndex(0);
  tubeC = sensors.getTempCByIndex(1);


  // Display temperature from each sensor
  // for (int i = 0;  i < deviceCount;  i++)
  // {
  //  Serial.print("Sensor ");
  ///  Serial.print(i+1);
  //  Serial.print(" : ");
  //   tankC = sensors.getTempCByIndex(i);
  //  Serial.print(tempC);
  //  Serial.print((char)176);//shows degrees character
  //  Serial.print("C  |  ");

  // }

  Serial.println("");
  delay(1000);
}

void loop() {
  sensors.requestTemperatures();
  lcd.setCursor(0, 0);
  lcd.print("Tank Temp: ");
  lcd.print(tankC);
  lcd.setCursor(0, 1);
  lcd.print("Tube Temp: ");
  lcd.print(tubeC);
  Pulse_Count = 0;

  Current_Time = millis();
  if (Current_Time >= (Loop_Time + 1000)) {
    Loop_Time = Current_Time;
    Liter_per_hour = (Pulse_Count * 60 / 93);
    Pulse_Count = 0;
    Serial.print(Liter_per_hour, DEC);
    Serial.println(" Liter/hour");
    lcd.setCursor(0, 2);
    lcd.print("Flow = ");
    lcd.print(Liter_per_hour);
    lcd.setCursor(10, 2);
    lcd.print(" Ltrs/H");
    check();}

  }
  void Detect_Rising_Edge() {
    Pulse_Count++;
  }

  void check() {

    if (Liter_per_hour < flowmin)
      ;
    for (flash = 0; flash < 5; flash++) {
      digitalWrite(Laser, LOW);
      lcd.clear();
      lcd.setCursor(8, 1);
      lcd.print("PUMP");
      lcd.setCursor(7, 2);
      lcd.print("ERROR!");
      delay(1000);
      lcd.clear();
      delay(1000);
    }
    if (tubeC > 20)
      ;
    for (flash = 0; flash < 5; flash++) {
      digitalWrite(Laser, LOW);
      lcd.clear();
      lcd.setCursor(8, 1);
      lcd.print("TEMP");
      lcd.setCursor(7, 2);
      lcd.print("ERROR!");
      delay(1000);
      lcd.clear();
      delay(1000);
    }
  }
